#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class cci_rpc_op:
  cro_idempotent = 1
  cro_mutable = 2
  cro_only_once = 3

  _VALUES_TO_NAMES = {
    1: "cro_idempotent",
    2: "cro_mutable",
    3: "cro_only_once",
  }

  _NAMES_TO_VALUES = {
    "cro_idempotent": 1,
    "cro_mutable": 2,
    "cro_only_once": 3,
  }


class cci_session:
  """
  Attributes:
   - session_id
   - datetime_t
   - last_op
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'session_id', None, 0, ), # 1
    (2, TType.I32, 'datetime_t', None, None, ), # 2
    (3, TType.I32, 'last_op', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, session_id=thrift_spec[1][4], datetime_t=None, last_op=None, comment=None,):
    self.session_id = session_id
    self.datetime_t = datetime_t
    self.last_op = last_op
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.session_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.datetime_t = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.last_op = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cci_session')
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.I32, 1)
      oprot.writeI32(self.session_id)
      oprot.writeFieldEnd()
    if self.datetime_t is not None:
      oprot.writeFieldBegin('datetime_t', TType.I32, 2)
      oprot.writeI32(self.datetime_t)
      oprot.writeFieldEnd()
    if self.last_op is not None:
      oprot.writeFieldBegin('last_op', TType.I32, 3)
      oprot.writeI32(self.last_op)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.session_id)
    value = (value * 31) ^ hash(self.datetime_t)
    value = (value * 31) ^ hash(self.last_op)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class invalid_llvm_op(TException):
  """
  Attributes:
   - what_op
   - wat
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'what_op', None, None, ), # 1
    (2, TType.STRING, 'wat', None, None, ), # 2
  )

  def __init__(self, what_op=None, wat=None,):
    self.what_op = what_op
    self.wat = wat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.what_op = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wat = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('invalid_llvm_op')
    if self.what_op is not None:
      oprot.writeFieldBegin('what_op', TType.I32, 1)
      oprot.writeI32(self.what_op)
      oprot.writeFieldEnd()
    if self.wat is not None:
      oprot.writeFieldBegin('wat', TType.STRING, 2)
      oprot.writeString(self.wat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.what_op)
    value = (value * 31) ^ hash(self.wat)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
